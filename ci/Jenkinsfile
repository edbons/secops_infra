pipeline {
    agent { label '!docker-agent' }
    
    environment {
        APP_IMAGE = 'kotlin-scp-api:latest'
        DOJO_TOKEN = credentials('defect.dojo')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Checkmarx/Goatlin.git']]])
            }
        }
        
        stage ('SAST') {
            steps {                
                // sh 'docker run -v ${WORKSPACE}:${WORKSPACE}:rw -v ${WORKSPACE}:/opt/insider/:rw insidersec/insider -tech android -target ${WORKSPACE}/packages -no-html'                
                // sh 'apt-get update && apt-get install -y wget'

                sh 'wget https://github.com/insidersec/insider/releases/download/2.1.0/insider_2.1.0_linux_x86_64.tar.gz'
                sh 'tar -xf insider_2.1.0_linux_x86_64.tar.gz' 
                sh 'chmod +x insider'
                sh './insider --tech android --target ./packages --no-html'
            }
        }

        stage ('Dependency-Check') {
            steps {  
                dependencyCheck additionalArguments: ''' 
                                    -o "." 
                                    -s "./packages"
                                    -f "XML"
                                    --prettyPrint''', odcInstallation: 'OWASP-DC'

                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        
        stage ('Build docker image') {
            steps{
                script{
                    app = docker.build(env.APP_IMAGE, './packages/services/api')
                }
            }
        }
        
        stage ('Scan docker image') {
            steps{

                sh 'curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b .'
                sh './trivy image --exit-code 0 --no-progress --format json --output trivy-scan.json $APP_IMAGE'
            }
        }

        stage ('DAST') {
            steps{
                script{
                    docker.image('mongo:5.0.6-focal').withRun('--name db --expose 27017') { c1->
                        docker.image('kotlin-scp-api').withRun('--name api --link db:db -p 8080:8080') {c2->
                            docker.image('owasp/zap2docker-stable').inside('--link api:api -v ${WORKSPACE}:/zap/wrk/:rw') {
                                sh 'zap-full-scan.py -t http://api:8080 -x zap-scan.xml'    
                            }
                        }
                    }
                }
            }
        }         

    }

    post {
        always {
            archiveArtifacts artifacts: '*-scan.*', followSymlinks: false
            sh """curl -i -F "file=@zap-scan.xml" -H "Authorization: Token $DOJO_TOKEN" -F "scan_type=ZAP Scan" -F "verified=true" -F "active=true" -F "product_name=Goatlin" -F "engagement_name=build_app" -F "auto_create_context=True" http://defectdojo.local:8080/api/v2/import-scan/"""
            sh """curl -i -F "file=@trivy-scan.json" -H "Authorization: Token $DOJO_TOKEN" -F "scan_type=Trivy Scan" -F "verified=true" -F "active=true" -F "product_name=Goatlin" -F "engagement_name=build_app" -F "auto_create_context=True" http://defectdojo.local:8080/api/v2/import-scan/"""
            
            archiveArtifacts artifacts: 'dependency-check-report.xml', followSymlinks: false
            sh """curl -i -F "file=@dependency-check-report.xml" -H "Authorization: Token $DOJO_TOKEN" -F "scan_type=Dependency Check Scan" -F "verified=true" -F "active=true" -F "product_name=Goatlin" -F "engagement_name=build_app" -F "auto_create_context=True" http://defectdojo.local:8080/api/v2/import-scan/"""
            
            archiveArtifacts artifacts: 'report-*.json', followSymlinks: false
            
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true)
        }
    }
}